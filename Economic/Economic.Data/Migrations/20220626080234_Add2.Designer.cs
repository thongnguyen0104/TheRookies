// <auto-generated />
using System;
using Economic.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Economic.Data.Migrations
{
    [DbContext(typeof(EconomicDbContext))]
    [Migration("20220626080234_Add2")]
    partial class Add2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Economic.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            ConcurrencyStamp = "73bad414-4677-4e68-a9cf-d4f72a0b38a5",
                            Description = "Administrator role",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("54ba416f-6b89-4c53-873d-4fbd48506e6d"),
                            ConcurrencyStamp = "d00515e8-89bf-4bd8-a571-e9a8b6d26747",
                            Description = "Customer role",
                            Name = "customer",
                            NormalizedName = "customer"
                        });
                });

            modelBuilder.Entity("Economic.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("default-avatar.png");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Economic.Data.Entities.Cart", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ProductId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Economic.Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Economic.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OrderDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Economic.Data.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Economic.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Nồi cơm nắp gài thiết kế đẹp mắt đáp ứng nhu cầu nấu cơm cơ bản; Nấu cơm chín nhanh chóng qua công nghệ nấu 1D, công suất 500W",
                            Name = "Nồi cơm nắp gài Kangaroo 1.5 lít KG825",
                            Price = 950000m,
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Nấu cơm thơm ngon, chín đều nhờ công nghệ nấu gia nhiệt tuần hoàn; Gia nhiệt đều, nấu cơm nhanh, giữ ấm lâu với công suất 860W cùng lòng nồi dạng niêu",
                            Name = "Nồi cơm điện tử Joyoung 1.8 lít F-50FY13",
                            Price = 1790000m,
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Nồi cơm nắp gài nhỏ gọn, đẹp mắt phù hợp cho nhu cầu nấu cơm cơ bản; Nấu cơm chín đều, tơi xốp, thơm ngon nhớ công nghệ nấu 1D, công suất 900W",
                            Name = "Nồi cơm nắp gài Kangaroo 2.2 lít KG829",
                            Price = 1150000m,
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Nồi cơm nắp gài nhỏ gọn, đẹp mắt sử dụng cho nhu cầu nấu cơm cơ bản; Nấu cơm chín đều, tơi xốp, thơm ngon nhờ công nghệ nấu 3D",
                            Name = "Nồi cơm nắp gài Kangaroo 1.2 lít KG822",
                            Price = 900000m,
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Nồi cơm nắp gài thiết kế đẹp mắt đáp ứng nhu cầu nấu cơm cơ bản; Nấu cơm chín nhanh đều, tơi xốp, thơm ngon nhờ công nghệ nấu 3D",
                            Name = "Nồi cơm nắp gài Delites 1.8 lít NCG1010",
                            Price = 790000m,
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "Nồi cơm nắp gài thiết kế nổi bật phù hợp cho nhu cầu nấu cơm cơ bản; Cơm nấu nhín ngon, nhanh chóng qua công nghệ nấu 1D, công suất 700W",
                            Name = "Nồi cơm nắp gài Kangaroo 2.2 lít KG572",
                            Price = 890000m,
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            Description = "Thiết kế đơn giản, màu sắc trẻ trung; Công nghệ nấu 1D, công suất 700W truyền nhiệt từ đáy nồi, cơm chín nhanh",
                            Name = "Nồi cơm nắp gài Ava 1.8 lít NCG1806",
                            Price = 720000m,
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            Description = "Thiết kế màu cam tơi tắn, nhỏ gọn; Công nghệ nấu 1D nấu chín từ 20 - 30 phút",
                            Name = "Nồi cơm điện Midea 0.6 lít MR-CM06SD",
                            Price = 590000m,
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 9,
                            Description = "Đáp ứng nhu cầu pha cà phê, nấu mì… với dung tích 1.5 lít; Nấu nước sôi nhanh 5- 7  phút với công suất 1500W",
                            Name = "Bình đun siêu tốc Delites 1.5 lít ST15S01",
                            Price = 170000m,
                            ProductTypeId = 2
                        },
                        new
                        {
                            Id = 10,
                            Description = "Nấu cơm thơm ngon, chín đều nhờ công nghệ nấu gia nhiệt tuần hoàn; Gia nhiệt đều, nấu cơm nhanh, giữ ấm lâu với công suất 860W cùng lòng nồi dạng niêu",
                            Name = "Nồi cơm điện tử Joyoung 1.8 lít F-50FY13",
                            Price = 1790000m,
                            ProductTypeId = 2
                        },
                        new
                        {
                            Id = 11,
                            Description = "Nồi cơm nắp gài nhỏ gọn, đẹp mắt phù hợp cho nhu cầu nấu cơm cơ bản; Nấu cơm chín đều, tơi xốp, thơm ngon nhớ công nghệ nấu 1D, công suất 900W",
                            Name = "Nồi cơm nắp gài Kangaroo 2.2 lít KG829",
                            Price = 1150000m,
                            ProductTypeId = 2
                        },
                        new
                        {
                            Id = 12,
                            Description = "Nồi cơm nắp gài nhỏ gọn, đẹp mắt sử dụng cho nhu cầu nấu cơm cơ bản; Nấu cơm chín đều, tơi xốp, thơm ngon nhờ công nghệ nấu 3D",
                            Name = "Nồi cơm nắp gài Kangaroo 1.2 lít KG822",
                            Price = 900000m,
                            ProductTypeId = 2
                        },
                        new
                        {
                            Id = 13,
                            Description = "Nồi cơm nắp gài thiết kế đẹp mắt đáp ứng nhu cầu nấu cơm cơ bản; Nấu cơm chín nhanh đều, tơi xốp, thơm ngon nhờ công nghệ nấu 3D",
                            Name = "Nồi cơm nắp gài Delites 1.8 lít NCG1010",
                            Price = 790000m,
                            ProductTypeId = 2
                        },
                        new
                        {
                            Id = 14,
                            Description = "Nồi cơm nắp gài thiết kế nổi bật phù hợp cho nhu cầu nấu cơm cơ bản; Cơm nấu nhín ngon, nhanh chóng qua công nghệ nấu 1D, công suất 700W",
                            Name = "Nồi cơm nắp gài Kangaroo 2.2 lít KG572",
                            Price = 890000m,
                            ProductTypeId = 2
                        },
                        new
                        {
                            Id = 15,
                            Description = "Thiết kế đơn giản, màu sắc trẻ trung; Công nghệ nấu 1D, công suất 700W truyền nhiệt từ đáy nồi, cơm chín nhanh",
                            Name = "Nồi cơm nắp gài Ava 1.8 lít NCG1806",
                            Price = 720000m,
                            ProductTypeId = 2
                        },
                        new
                        {
                            Id = 16,
                            Description = "Thiết kế màu cam tơi tắn, nhỏ gọn; Công nghệ nấu 1D nấu chín từ 20 - 30 phút",
                            Name = "Nồi cơm điện Midea 0.6 lít MR-CM06SD",
                            Price = 590000m,
                            ProductTypeId = 2
                        });
                });

            modelBuilder.Entity("Economic.Data.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            ProductPath = "1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 1,
                            ProductPath = "1.1.jpg"
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 1,
                            ProductPath = "1.2.jpg"
                        },
                        new
                        {
                            Id = 4,
                            ProductId = 1,
                            ProductPath = "1.3.jpg"
                        },
                        new
                        {
                            Id = 5,
                            ProductId = 2,
                            ProductPath = "2.jpg"
                        },
                        new
                        {
                            Id = 6,
                            ProductId = 2,
                            ProductPath = "2.1.jpg"
                        },
                        new
                        {
                            Id = 7,
                            ProductId = 2,
                            ProductPath = "2.2.jpg"
                        },
                        new
                        {
                            Id = 8,
                            ProductId = 2,
                            ProductPath = "2.3.jpg"
                        },
                        new
                        {
                            Id = 9,
                            ProductId = 3,
                            ProductPath = "3.jpg"
                        },
                        new
                        {
                            Id = 10,
                            ProductId = 3,
                            ProductPath = "3.1.jpg"
                        },
                        new
                        {
                            Id = 11,
                            ProductId = 3,
                            ProductPath = "3.2.jpg"
                        },
                        new
                        {
                            Id = 12,
                            ProductId = 3,
                            ProductPath = "3.3.jpg"
                        },
                        new
                        {
                            Id = 13,
                            ProductId = 4,
                            ProductPath = "4.jpg"
                        },
                        new
                        {
                            Id = 14,
                            ProductId = 4,
                            ProductPath = "4.1.jpg"
                        },
                        new
                        {
                            Id = 15,
                            ProductId = 4,
                            ProductPath = "4.2.jpg"
                        },
                        new
                        {
                            Id = 16,
                            ProductId = 4,
                            ProductPath = "4.3.jpg"
                        },
                        new
                        {
                            Id = 17,
                            ProductId = 5,
                            ProductPath = "5.jpg"
                        },
                        new
                        {
                            Id = 18,
                            ProductId = 5,
                            ProductPath = "5.1.jpg"
                        },
                        new
                        {
                            Id = 19,
                            ProductId = 5,
                            ProductPath = "5.2.jpg"
                        },
                        new
                        {
                            Id = 20,
                            ProductId = 5,
                            ProductPath = "5.3.jpg"
                        },
                        new
                        {
                            Id = 21,
                            ProductId = 6,
                            ProductPath = "6.jpg"
                        },
                        new
                        {
                            Id = 22,
                            ProductId = 6,
                            ProductPath = "6.1.jpg"
                        },
                        new
                        {
                            Id = 23,
                            ProductId = 6,
                            ProductPath = "6.2.jpg"
                        },
                        new
                        {
                            Id = 24,
                            ProductId = 6,
                            ProductPath = "6.3.jpg"
                        },
                        new
                        {
                            Id = 25,
                            ProductId = 7,
                            ProductPath = "7.jpg"
                        },
                        new
                        {
                            Id = 26,
                            ProductId = 7,
                            ProductPath = "7.1.jpg"
                        },
                        new
                        {
                            Id = 27,
                            ProductId = 7,
                            ProductPath = "7.2.jpg"
                        },
                        new
                        {
                            Id = 28,
                            ProductId = 7,
                            ProductPath = "7.3.jpg"
                        },
                        new
                        {
                            Id = 29,
                            ProductId = 8,
                            ProductPath = "8.jpg"
                        },
                        new
                        {
                            Id = 30,
                            ProductId = 8,
                            ProductPath = "8.1.jpg"
                        },
                        new
                        {
                            Id = 31,
                            ProductId = 8,
                            ProductPath = "8.2.jpg"
                        },
                        new
                        {
                            Id = 32,
                            ProductId = 8,
                            ProductPath = "8.3.jpg"
                        },
                        new
                        {
                            Id = 33,
                            ProductId = 9,
                            ProductPath = "9.jpg"
                        },
                        new
                        {
                            Id = 34,
                            ProductId = 9,
                            ProductPath = "9.1.jpg"
                        },
                        new
                        {
                            Id = 35,
                            ProductId = 9,
                            ProductPath = "9.2.jpg"
                        },
                        new
                        {
                            Id = 36,
                            ProductId = 9,
                            ProductPath = "9.3.jpg"
                        },
                        new
                        {
                            Id = 37,
                            ProductId = 10,
                            ProductPath = "10.jpg"
                        },
                        new
                        {
                            Id = 38,
                            ProductId = 10,
                            ProductPath = "10.1.jpg"
                        },
                        new
                        {
                            Id = 39,
                            ProductId = 10,
                            ProductPath = "10.2.jpg"
                        },
                        new
                        {
                            Id = 40,
                            ProductId = 10,
                            ProductPath = "10.3.jpg"
                        },
                        new
                        {
                            Id = 41,
                            ProductId = 11,
                            ProductPath = "11.jpg"
                        },
                        new
                        {
                            Id = 42,
                            ProductId = 11,
                            ProductPath = "11.1.jpg"
                        },
                        new
                        {
                            Id = 43,
                            ProductId = 11,
                            ProductPath = "11.2.jpg"
                        },
                        new
                        {
                            Id = 44,
                            ProductId = 11,
                            ProductPath = "11.3.jpg"
                        },
                        new
                        {
                            Id = 45,
                            ProductId = 12,
                            ProductPath = "12.jpg"
                        },
                        new
                        {
                            Id = 46,
                            ProductId = 12,
                            ProductPath = "12.1.jpg"
                        },
                        new
                        {
                            Id = 47,
                            ProductId = 12,
                            ProductPath = "12.2.jpg"
                        },
                        new
                        {
                            Id = 48,
                            ProductId = 12,
                            ProductPath = "12.3.jpg"
                        },
                        new
                        {
                            Id = 49,
                            ProductId = 13,
                            ProductPath = "13.jpg"
                        },
                        new
                        {
                            Id = 50,
                            ProductId = 13,
                            ProductPath = "13.1.jpg"
                        },
                        new
                        {
                            Id = 51,
                            ProductId = 13,
                            ProductPath = "13.2.jpg"
                        },
                        new
                        {
                            Id = 52,
                            ProductId = 13,
                            ProductPath = "13.3.jpg"
                        },
                        new
                        {
                            Id = 53,
                            ProductId = 14,
                            ProductPath = "14.jpg"
                        },
                        new
                        {
                            Id = 54,
                            ProductId = 14,
                            ProductPath = "14.1.jpg"
                        },
                        new
                        {
                            Id = 55,
                            ProductId = 14,
                            ProductPath = "14.2.jpg"
                        },
                        new
                        {
                            Id = 56,
                            ProductId = 14,
                            ProductPath = "14.3.jpg"
                        },
                        new
                        {
                            Id = 57,
                            ProductId = 15,
                            ProductPath = "15.jpg"
                        },
                        new
                        {
                            Id = 58,
                            ProductId = 15,
                            ProductPath = "15.1.jpg"
                        },
                        new
                        {
                            Id = 59,
                            ProductId = 15,
                            ProductPath = "15.2.jpg"
                        },
                        new
                        {
                            Id = 60,
                            ProductId = 15,
                            ProductPath = "15.3.jpg"
                        },
                        new
                        {
                            Id = 61,
                            ProductId = 16,
                            ProductPath = "16.jpg"
                        },
                        new
                        {
                            Id = 62,
                            ProductId = 16,
                            ProductPath = "16.1.jpg"
                        },
                        new
                        {
                            Id = 63,
                            ProductId = 16,
                            ProductPath = "16.2.jpg"
                        },
                        new
                        {
                            Id = 64,
                            ProductId = 16,
                            ProductPath = "16.3.jpg"
                        });
                });

            modelBuilder.Entity("Economic.Data.Entities.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Mang đến những bửa cơm đầy dinh dưỡng cho gia đình bạn",
                            Name = "Nồi cơm điện"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Giải pháp hiệu quả cho người bận rộn",
                            Name = "Ấm đun siêu tốc"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Lựa chọn tốt nhất hàng đàu mang lại vitamin trái cây",
                            Name = "Máy xay sinh tố"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Chắc lọc sự tinh túy từ thiện nhiên trong ly nước ép",
                            Name = "Máy ép trái cây"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Cắt giảm lượng dầu mỡ tối đa cho gia đình bạn",
                            Name = "Nồi chiên không dầu"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Sự lựa chọn tối ưu cho bửa xum họp gia đình",
                            Name = "Lẩu điện"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Những buổi tiệc nướng đầy ấm áp bên người thân được mang lại",
                            Name = "Bếp nướng"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Căn bếp đầy tiện nghi và sang trọng khi có mặt sản phẩm này",
                            Name = "Bếp hồng ngoại"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("Economic.Data.Entities.Cart", b =>
                {
                    b.HasOne("Economic.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Economic.Data.Entities.AppUser", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Economic.Data.Entities.Comment", b =>
                {
                    b.HasOne("Economic.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Economic.Data.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Economic.Data.Entities.Order", b =>
                {
                    b.HasOne("Economic.Data.Entities.AppUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("Economic.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("Economic.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Economic.Data.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Economic.Data.Entities.Product", b =>
                {
                    b.HasOne("Economic.Data.Entities.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("Economic.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("Economic.Data.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Economic.Data.Entities.AppUser", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Economic.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Economic.Data.Entities.Product", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("Economic.Data.Entities.ProductType", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
